////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Adder.vf
// /___/   /\     Timestamp : 10/28/2020 22:50:32
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "C:/Users/Redzer0/Desktop/Classroom/1-2563-Digital Fundamental/Lab8.Adder/Adder.vf" -w "C:/Users/Redzer0/Desktop/Classroom/1-2563-Digital Fundamental/Lab8.Adder/Adder.sch"
//Design Name: Adder
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module D4_16E_HXILINX_Adder (D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, A0, A1, A2, A3, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;
   output D8;
   output D9;
   output D10;
   output D11;
   output D12;
   output D13;
   output D14;
   output D15;

   input  A0;
   input  A1;
   input  A2;
   input  A3;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;
   reg D8;
   reg D9;
   reg D10;
   reg D11;
   reg D12;
   reg D13;
   reg D14;
   reg D15;

      always @ (A0 or A1 or A2 or A3 or E)
      begin
         if(!E)
           {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0000;
        else
        begin
           case({A3,A2,A1,A0})
             4'b0000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0001;
             4'b0001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0010;
             4'b0010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0100;
             4'b0011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_1000;
             4'b0100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0001_0000;
             4'b0101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0010_0000;
             4'b0110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0100_0000;
             4'b0111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_1000_0000;
             4'b1000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0001_0000_0000;
             4'b1001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0010_0000_0000;
             4'b1010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0100_0000_0000;
             4'b1011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_1000_0000_0000;
             4'b1100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0001_0000_0000_0000;
             4'b1101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0010_0000_0000_0000;
             4'b1110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0100_0000_0000_0000;
             4'b1111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b1000_0000_0000_0000;
          endcase
        end
     end 

endmodule
`timescale  100 ps / 10 ps

module NOR6_HXILINX_Adder (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = !(I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale  100 ps / 10 ps

module INV4_HXILINX_Adder (O0, O1, O2, O3, I0, I1, I2, I3);
    

   output O0;
   output O1;
   output O2;
   output O3;

   input  I0;
   input  I1;
   input  I2;
   input  I3;

assign O0 = !I0;
assign O1 = !I1;
assign O2 = !I2;
assign O3 = !I3;

endmodule
`timescale 100 ps / 10 ps

module CB16CE_HXILINX_Adder(CEO, Q, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 16'b1111_1111_1111_1111;
   
   output             CEO;
   output [15:0]      Q;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg    [15:0]      Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 16'b0000_0000_0000_0000;
	else if (CE)
	  Q <= Q + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = (Q == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_Adder (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_Adder (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_Adder(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Check16BitIs0_MUSER_Adder(BIN, 
                                 EQ);

    input [15:0] BIN;
   output EQ;
   
   wire [3:0] Q;
   
   AND4B4  XLXI_1_0 (.I0(BIN[12]), 
                    .I1(BIN[8]), 
                    .I2(BIN[4]), 
                    .I3(BIN[0]), 
                    .O(Q[0]));
   AND4B4  XLXI_1_1 (.I0(BIN[13]), 
                    .I1(BIN[9]), 
                    .I2(BIN[5]), 
                    .I3(BIN[1]), 
                    .O(Q[1]));
   AND4B4  XLXI_1_2 (.I0(BIN[14]), 
                    .I1(BIN[10]), 
                    .I2(BIN[6]), 
                    .I3(BIN[2]), 
                    .O(Q[2]));
   AND4B4  XLXI_1_3 (.I0(BIN[15]), 
                    .I1(BIN[11]), 
                    .I2(BIN[7]), 
                    .I3(BIN[3]), 
                    .O(Q[3]));
   AND4  XLXI_2 (.I0(Q[3]), 
                .I1(Q[2]), 
                .I2(Q[1]), 
                .I3(Q[0]), 
                .O(EQ));
endmodule
`timescale 1ns / 1ps

module FullAdder1Bit_MUSER_Adder(A, 
                                 B, 
                                 CI, 
                                 CO, 
                                 S);

    input A;
    input B;
    input CI;
   output CO;
   output S;
   
   wire XLXN_4;
   wire XLXN_9;
   wire XLXN_10;
   
   XOR2  XLXI_1 (.I0(B), 
                .I1(A), 
                .O(XLXN_4));
   XOR2  XLXI_2 (.I0(CI), 
                .I1(XLXN_4), 
                .O(S));
   AND2  XLXI_3 (.I0(CI), 
                .I1(XLXN_4), 
                .O(XLXN_9));
   AND2  XLXI_4 (.I0(B), 
                .I1(A), 
                .O(XLXN_10));
   OR2  XLXI_5 (.I0(XLXN_10), 
               .I1(XLXN_9), 
               .O(CO));
endmodule
`timescale 1ns / 1ps

module Adder4_MUSER_Adder(A, 
                          B, 
                          CI, 
                          CO, 
                          S);

    input [3:0] A;
    input [3:0] B;
    input CI;
   output CO;
   output [3:0] S;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   
   FullAdder1Bit_MUSER_Adder  XLXI_1 (.A(A[0]), 
                                     .B(B[0]), 
                                     .CI(CI), 
                                     .CO(XLXN_1), 
                                     .S(S[0]));
   FullAdder1Bit_MUSER_Adder  XLXI_2 (.A(A[1]), 
                                     .B(B[1]), 
                                     .CI(XLXN_1), 
                                     .CO(XLXN_2), 
                                     .S(S[1]));
   FullAdder1Bit_MUSER_Adder  XLXI_3 (.A(A[2]), 
                                     .B(B[2]), 
                                     .CI(XLXN_2), 
                                     .CO(XLXN_3), 
                                     .S(S[2]));
   FullAdder1Bit_MUSER_Adder  XLXI_4 (.A(A[3]), 
                                     .B(B[3]), 
                                     .CI(XLXN_3), 
                                     .CO(CO), 
                                     .S(S[3]));
endmodule
`timescale 1ns / 1ps

module Adder8_MUSER_Adder(A, 
                          B, 
                          CI, 
                          CO, 
                          S);

    input [7:0] A;
    input [7:0] B;
    input CI;
   output CO;
   output [7:0] S;
   
   wire XLXN_1;
   
   Adder4_MUSER_Adder  XLXI_1 (.A(A[3:0]), 
                              .B(B[3:0]), 
                              .CI(CI), 
                              .CO(XLXN_1), 
                              .S(S[3:0]));
   Adder4_MUSER_Adder  XLXI_2 (.A(A[7:4]), 
                              .B(B[7:4]), 
                              .CI(XLXN_1), 
                              .CO(CO), 
                              .S(S[7:4]));
endmodule
`timescale 1ns / 1ps

module HEXto7Seg_MUSER_Adder(HEX, 
                             SEG);

    input [3:0] HEX;
   output [6:0] SEG;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_20;
   
   (* HU_SET = "XLXI_4_14" *) 
   D4_16E_HXILINX_Adder  XLXI_4 (.A0(HEX[0]), 
                                .A1(HEX[1]), 
                                .A2(HEX[2]), 
                                .A3(HEX[3]), 
                                .E(XLXN_20), 
                                .D0(XLXN_1), 
                                .D1(XLXN_2), 
                                .D2(XLXN_3), 
                                .D3(XLXN_4), 
                                .D4(XLXN_5), 
                                .D5(XLXN_6), 
                                .D6(XLXN_7), 
                                .D7(XLXN_8), 
                                .D8(), 
                                .D9(XLXN_10), 
                                .D10(XLXN_11), 
                                .D11(XLXN_12), 
                                .D12(XLXN_13), 
                                .D13(XLXN_14), 
                                .D14(XLXN_15), 
                                .D15(XLXN_16));
   NOR4  XLXI_5 (.I0(XLXN_2), 
                .I1(XLXN_5), 
                .I2(XLXN_12), 
                .I3(XLXN_14), 
                .O(SEG[0]));
   (* HU_SET = "XLXI_6_15" *) 
   NOR6_HXILINX_Adder  XLXI_6 (.I0(XLXN_6), 
                              .I1(XLXN_7), 
                              .I2(XLXN_12), 
                              .I3(XLXN_13), 
                              .I4(XLXN_15), 
                              .I5(XLXN_16), 
                              .O(SEG[1]));
   NOR4  XLXI_7 (.I0(XLXN_3), 
                .I1(XLXN_13), 
                .I2(XLXN_15), 
                .I3(XLXN_16), 
                .O(SEG[2]));
   NOR5  XLXI_8 (.I0(XLXN_2), 
                .I1(XLXN_5), 
                .I2(XLXN_8), 
                .I3(XLXN_11), 
                .I4(XLXN_16), 
                .O(SEG[3]));
   (* HU_SET = "XLXI_9_16" *) 
   NOR6_HXILINX_Adder  XLXI_9 (.I0(XLXN_2), 
                              .I1(XLXN_4), 
                              .I2(XLXN_5), 
                              .I3(XLXN_6), 
                              .I4(XLXN_8), 
                              .I5(XLXN_10), 
                              .O(SEG[4]));
   NOR5  XLXI_10 (.I0(XLXN_2), 
                 .I1(XLXN_3), 
                 .I2(XLXN_4), 
                 .I3(XLXN_8), 
                 .I4(XLXN_14), 
                 .O(SEG[5]));
   NOR4  XLXI_11 (.I0(XLXN_1), 
                 .I1(XLXN_2), 
                 .I2(XLXN_8), 
                 .I3(XLXN_13), 
                 .O(SEG[6]));
   VCC  XLXI_12 (.P(XLXN_20));
endmodule
`timescale 1ns / 1ps

module HEXto7Seg4Digit_MUSER_Adder(BIN, 
                                   CLK, 
                                   COM, 
                                   SEG);

    input [15:0] BIN;
    input CLK;
   output [3:0] COM;
   output [6:0] SEG;
   
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_17;
   wire XLXN_22;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire [3:0] XLXN_28;
   wire XLXN_35;
   
   (* HU_SET = "XLXI_1_17" *) 
   CB2CE_HXILINX_Adder  XLXI_1 (.C(CLK), 
                               .CE(XLXN_35), 
                               .CLR(XLXN_22), 
                               .CEO(), 
                               .Q0(XLXN_7), 
                               .Q1(XLXN_8), 
                               .TC());
   (* HU_SET = "XLXI_2_0_21" *) 
   M4_1E_HXILINX_Adder  XLXI_2_0 (.D0(BIN[0]), 
                                 .D1(BIN[4]), 
                                 .D2(BIN[8]), 
                                 .D3(BIN[12]), 
                                 .E(XLXN_17), 
                                 .S0(XLXN_7), 
                                 .S1(XLXN_8), 
                                 .O(XLXN_28[0]));
   (* HU_SET = "XLXI_2_1_20" *) 
   M4_1E_HXILINX_Adder  XLXI_2_1 (.D0(BIN[1]), 
                                 .D1(BIN[5]), 
                                 .D2(BIN[9]), 
                                 .D3(BIN[13]), 
                                 .E(XLXN_17), 
                                 .S0(XLXN_7), 
                                 .S1(XLXN_8), 
                                 .O(XLXN_28[1]));
   (* HU_SET = "XLXI_2_2_19" *) 
   M4_1E_HXILINX_Adder  XLXI_2_2 (.D0(BIN[2]), 
                                 .D1(BIN[6]), 
                                 .D2(BIN[10]), 
                                 .D3(BIN[14]), 
                                 .E(XLXN_17), 
                                 .S0(XLXN_7), 
                                 .S1(XLXN_8), 
                                 .O(XLXN_28[2]));
   (* HU_SET = "XLXI_2_3_18" *) 
   M4_1E_HXILINX_Adder  XLXI_2_3 (.D0(BIN[3]), 
                                 .D1(BIN[7]), 
                                 .D2(BIN[11]), 
                                 .D3(BIN[15]), 
                                 .E(XLXN_17), 
                                 .S0(XLXN_7), 
                                 .S1(XLXN_8), 
                                 .O(XLXN_28[3]));
   (* HU_SET = "XLXI_3_22" *) 
   D2_4E_HXILINX_Adder  XLXI_3 (.A0(XLXN_7), 
                               .A1(XLXN_8), 
                               .E(XLXN_17), 
                               .D0(XLXN_24), 
                               .D1(XLXN_25), 
                               .D2(XLXN_26), 
                               .D3(XLXN_27));
   VCC  XLXI_4 (.P(XLXN_17));
   GND  XLXI_5 (.G(XLXN_22));
   (* HU_SET = "XLXI_6_23" *) 
   INV4_HXILINX_Adder  XLXI_6 (.I0(XLXN_27), 
                              .I1(XLXN_26), 
                              .I2(XLXN_25), 
                              .I3(XLXN_24), 
                              .O0(COM[3]), 
                              .O1(COM[2]), 
                              .O2(COM[1]), 
                              .O3(COM[0]));
   HEXto7Seg_MUSER_Adder  XLXI_7 (.HEX(XLXN_28[3:0]), 
                                 .SEG(SEG[6:0]));
   VCC  XLXI_8 (.P(XLXN_35));
endmodule
`timescale 1ns / 1ps

module ClockDivider_MUSER_Adder(ClockIn, 
                                CLK7Seg);

    input ClockIn;
   output CLK7Seg;
   
   wire [15:0] Q;
   wire XLXN_52;
   wire XLXN_56;
   
   VCC  XLXI_37 (.P(XLXN_52));
   GND  XLXI_38 (.G(XLXN_56));
   (* HU_SET = "XLXI_40_24" *) 
   CB16CE_HXILINX_Adder  XLXI_40 (.C(ClockIn), 
                                 .CE(XLXN_52), 
                                 .CLR(XLXN_56), 
                                 .CEO(), 
                                 .Q(Q[15:0]), 
                                 .TC());
   BUF  XLXI_41 (.I(Q[15]), 
                .O(CLK7Seg));
endmodule
`timescale 1ns / 1ps

module Adder(DIP, 
             OSC, 
             SW, 
             BUZZER, 
             COM, 
             SEG);

    input [7:0] DIP;
    input OSC;
    input [7:0] SW;
   output BUZZER;
   output [3:0] COM;
   output [6:0] SEG;
   
   wire [15:0] BIN;
   wire XLXN_9;
   wire XLXN_30;
   
   ClockDivider_MUSER_Adder  XLXI_2 (.ClockIn(OSC), 
                                    .CLK7Seg(XLXN_9));
   HEXto7Seg4Digit_MUSER_Adder  XLXI_5 (.BIN(BIN[15:0]), 
                                       .CLK(XLXN_9), 
                                       .COM(COM[3:0]), 
                                       .SEG(SEG[6:0]));
   GND  XLXI_6_9 (.G(BIN[9]));
   GND  XLXI_6_10 (.G(BIN[10]));
   GND  XLXI_6_11 (.G(BIN[11]));
   GND  XLXI_6_12 (.G(BIN[12]));
   GND  XLXI_6_13 (.G(BIN[13]));
   GND  XLXI_6_14 (.G(BIN[14]));
   GND  XLXI_6_15 (.G(BIN[15]));
   GND  XLXI_13 (.G(XLXN_30));
   Check16BitIs0_MUSER_Adder  XLXI_14 (.BIN(BIN[15:0]), 
                                      .EQ(BUZZER));
   Adder8_MUSER_Adder  XLXI_15 (.A(SW[7:0]), 
                               .B(DIP[7:0]), 
                               .CI(XLXN_30), 
                               .CO(BIN[8]), 
                               .S(BIN[7:0]));
endmodule
