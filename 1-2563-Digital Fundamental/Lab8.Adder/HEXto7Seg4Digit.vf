////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : HEXto7Seg4Digit.vf
// /___/   /\     Timestamp : 10/28/2020 22:50:29
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "C:/Users/Redzer0/Desktop/Classroom/1-2563-Digital Fundamental/Lab8.Adder/HEXto7Seg4Digit.vf" -w "C:/Users/Redzer0/Desktop/Classroom/1-2563-Digital Fundamental/Lab8.Adder/HEXto7Seg4Digit.sch"
//Design Name: HEXto7Seg4Digit
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module D4_16E_HXILINX_HEXto7Seg4Digit (D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, A0, A1, A2, A3, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;
   output D8;
   output D9;
   output D10;
   output D11;
   output D12;
   output D13;
   output D14;
   output D15;

   input  A0;
   input  A1;
   input  A2;
   input  A3;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;
   reg D8;
   reg D9;
   reg D10;
   reg D11;
   reg D12;
   reg D13;
   reg D14;
   reg D15;

      always @ (A0 or A1 or A2 or A3 or E)
      begin
         if(!E)
           {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0000;
        else
        begin
           case({A3,A2,A1,A0})
             4'b0000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0001;
             4'b0001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0010;
             4'b0010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0100;
             4'b0011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_1000;
             4'b0100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0001_0000;
             4'b0101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0010_0000;
             4'b0110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0100_0000;
             4'b0111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_1000_0000;
             4'b1000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0001_0000_0000;
             4'b1001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0010_0000_0000;
             4'b1010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0100_0000_0000;
             4'b1011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_1000_0000_0000;
             4'b1100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0001_0000_0000_0000;
             4'b1101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0010_0000_0000_0000;
             4'b1110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0100_0000_0000_0000;
             4'b1111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b1000_0000_0000_0000;
          endcase
        end
     end 

endmodule
`timescale  100 ps / 10 ps

module NOR6_HXILINX_HEXto7Seg4Digit (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = !(I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale  100 ps / 10 ps

module INV4_HXILINX_HEXto7Seg4Digit (O0, O1, O2, O3, I0, I1, I2, I3);
    

   output O0;
   output O1;
   output O2;
   output O3;

   input  I0;
   input  I1;
   input  I2;
   input  I3;

assign O0 = !I0;
assign O1 = !I1;
assign O2 = !I2;
assign O3 = !I3;

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_HEXto7Seg4Digit (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_HEXto7Seg4Digit (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_HEXto7Seg4Digit(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module HEXto7Seg_MUSER_HEXto7Seg4Digit(HEX, 
                                       SEG);

    input [3:0] HEX;
   output [6:0] SEG;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_20;
   
   (* HU_SET = "XLXI_4_0" *) 
   D4_16E_HXILINX_HEXto7Seg4Digit  XLXI_4 (.A0(HEX[0]), 
                                          .A1(HEX[1]), 
                                          .A2(HEX[2]), 
                                          .A3(HEX[3]), 
                                          .E(XLXN_20), 
                                          .D0(XLXN_1), 
                                          .D1(XLXN_2), 
                                          .D2(XLXN_3), 
                                          .D3(XLXN_4), 
                                          .D4(XLXN_5), 
                                          .D5(XLXN_6), 
                                          .D6(XLXN_7), 
                                          .D7(XLXN_8), 
                                          .D8(), 
                                          .D9(XLXN_10), 
                                          .D10(XLXN_11), 
                                          .D11(XLXN_12), 
                                          .D12(XLXN_13), 
                                          .D13(XLXN_14), 
                                          .D14(XLXN_15), 
                                          .D15(XLXN_16));
   NOR4  XLXI_5 (.I0(XLXN_2), 
                .I1(XLXN_5), 
                .I2(XLXN_12), 
                .I3(XLXN_14), 
                .O(SEG[0]));
   (* HU_SET = "XLXI_6_1" *) 
   NOR6_HXILINX_HEXto7Seg4Digit  XLXI_6 (.I0(XLXN_6), 
                                        .I1(XLXN_7), 
                                        .I2(XLXN_12), 
                                        .I3(XLXN_13), 
                                        .I4(XLXN_15), 
                                        .I5(XLXN_16), 
                                        .O(SEG[1]));
   NOR4  XLXI_7 (.I0(XLXN_3), 
                .I1(XLXN_13), 
                .I2(XLXN_15), 
                .I3(XLXN_16), 
                .O(SEG[2]));
   NOR5  XLXI_8 (.I0(XLXN_2), 
                .I1(XLXN_5), 
                .I2(XLXN_8), 
                .I3(XLXN_11), 
                .I4(XLXN_16), 
                .O(SEG[3]));
   (* HU_SET = "XLXI_9_2" *) 
   NOR6_HXILINX_HEXto7Seg4Digit  XLXI_9 (.I0(XLXN_2), 
                                        .I1(XLXN_4), 
                                        .I2(XLXN_5), 
                                        .I3(XLXN_6), 
                                        .I4(XLXN_8), 
                                        .I5(XLXN_10), 
                                        .O(SEG[4]));
   NOR5  XLXI_10 (.I0(XLXN_2), 
                 .I1(XLXN_3), 
                 .I2(XLXN_4), 
                 .I3(XLXN_8), 
                 .I4(XLXN_14), 
                 .O(SEG[5]));
   NOR4  XLXI_11 (.I0(XLXN_1), 
                 .I1(XLXN_2), 
                 .I2(XLXN_8), 
                 .I3(XLXN_13), 
                 .O(SEG[6]));
   VCC  XLXI_12 (.P(XLXN_20));
endmodule
`timescale 1ns / 1ps

module HEXto7Seg4Digit(BIN, 
                       CLK, 
                       COM, 
                       SEG);

    input [15:0] BIN;
    input CLK;
   output [3:0] COM;
   output [6:0] SEG;
   
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_17;
   wire XLXN_22;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire [3:0] XLXN_28;
   wire XLXN_35;
   
   (* HU_SET = "XLXI_1_3" *) 
   CB2CE_HXILINX_HEXto7Seg4Digit  XLXI_1 (.C(CLK), 
                                         .CE(XLXN_35), 
                                         .CLR(XLXN_22), 
                                         .CEO(), 
                                         .Q0(XLXN_7), 
                                         .Q1(XLXN_8), 
                                         .TC());
   (* HU_SET = "XLXI_2_0_7" *) 
   M4_1E_HXILINX_HEXto7Seg4Digit  XLXI_2_0 (.D0(BIN[0]), 
                                           .D1(BIN[4]), 
                                           .D2(BIN[8]), 
                                           .D3(BIN[12]), 
                                           .E(XLXN_17), 
                                           .S0(XLXN_7), 
                                           .S1(XLXN_8), 
                                           .O(XLXN_28[0]));
   (* HU_SET = "XLXI_2_1_6" *) 
   M4_1E_HXILINX_HEXto7Seg4Digit  XLXI_2_1 (.D0(BIN[1]), 
                                           .D1(BIN[5]), 
                                           .D2(BIN[9]), 
                                           .D3(BIN[13]), 
                                           .E(XLXN_17), 
                                           .S0(XLXN_7), 
                                           .S1(XLXN_8), 
                                           .O(XLXN_28[1]));
   (* HU_SET = "XLXI_2_2_5" *) 
   M4_1E_HXILINX_HEXto7Seg4Digit  XLXI_2_2 (.D0(BIN[2]), 
                                           .D1(BIN[6]), 
                                           .D2(BIN[10]), 
                                           .D3(BIN[14]), 
                                           .E(XLXN_17), 
                                           .S0(XLXN_7), 
                                           .S1(XLXN_8), 
                                           .O(XLXN_28[2]));
   (* HU_SET = "XLXI_2_3_4" *) 
   M4_1E_HXILINX_HEXto7Seg4Digit  XLXI_2_3 (.D0(BIN[3]), 
                                           .D1(BIN[7]), 
                                           .D2(BIN[11]), 
                                           .D3(BIN[15]), 
                                           .E(XLXN_17), 
                                           .S0(XLXN_7), 
                                           .S1(XLXN_8), 
                                           .O(XLXN_28[3]));
   (* HU_SET = "XLXI_3_8" *) 
   D2_4E_HXILINX_HEXto7Seg4Digit  XLXI_3 (.A0(XLXN_7), 
                                         .A1(XLXN_8), 
                                         .E(XLXN_17), 
                                         .D0(XLXN_24), 
                                         .D1(XLXN_25), 
                                         .D2(XLXN_26), 
                                         .D3(XLXN_27));
   VCC  XLXI_4 (.P(XLXN_17));
   GND  XLXI_5 (.G(XLXN_22));
   (* HU_SET = "XLXI_6_9" *) 
   INV4_HXILINX_HEXto7Seg4Digit  XLXI_6 (.I0(XLXN_27), 
                                        .I1(XLXN_26), 
                                        .I2(XLXN_25), 
                                        .I3(XLXN_24), 
                                        .O0(COM[3]), 
                                        .O1(COM[2]), 
                                        .O2(COM[1]), 
                                        .O3(COM[0]));
   HEXto7Seg_MUSER_HEXto7Seg4Digit  XLXI_7 (.HEX(XLXN_28[3:0]), 
                                           .SEG(SEG[6:0]));
   VCC  XLXI_8 (.P(XLXN_35));
endmodule
